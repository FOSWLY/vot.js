import { TinyInt } from "../utils";

export type ViewerData = {
  user: null;
  jwt: string;
  location: string;
  apiUrl: string; // domain
  viewmasterCdnUrl: string; // schema + domain
  vimeoHttpsUrl: string; // schema + domain
  vuid: string;
  ablincolnConfig: unknown[];
  xsrft: string;
  recaptchaSiteKey: string;
  locale: string;
  locales: string[];
  locale_labels: string[];
  cart: unknown; // useless
  contentViewingPrefs: unknown; // useless
  gdprQualifies: boolean;
  ofcomQualifies: boolean;
  impressumQualifies: boolean;
  terminateContractQualifies: boolean;
  thirdPartyTracking: boolean;
  gdprBannerJS: string;
  shouldOptIntoMarketing: boolean;
  vuidCookieJS: string;
  optOutMobile: boolean;
  ribbonModifier: string;
  googleMapApiKey: string;
  magistoApiHost: string; // idk, domain
  omnisearchDisabled: null;
  facebookAppId: number;
  screen_recorder_extension_link: string;
  isMobile: boolean;
  isRecordToolSupported: boolean;
  isPerSeatPricing: boolean;
  recaptchaEnterpriseScoreBasedSiteKey: string;
  isSimplifiedSite: boolean;
  isEnterpriseSite: boolean;
  isFromCopyrightRestrictedRegion: boolean;
  turnstileSiteKey: string;
  terms_show_privacy_choices: boolean;
  vatConfig: unknown; // useless
};

export type Error = {
  error: string;
  link?: string;
  developer_message?: string;
  error_code?: number;
};

export type VideoInfo = {
  name: string;
  description: string;
  link: string;
  duration: number;
};

export type VideoSubtitle = {
  type: "captions";
  language: string; // ...-x-autogen for autogenerated
  id: number;
  link: string; // link to vtt file
};

export type PrivateVideo = {
  ai: TinyInt;
  channel_layout: string;
  default_to_hd: TinyInt;
  duration: number;
  embed_code: string;
  embed_permission: "whitelist";
  fps: number;
  height: number;
  id: number;
  live_event: null;
  owner: unknown; // useless
  privacy: "disable" | "anybody"; // disable - private video
  rating: Record<"id", number>;
  share_url: string; // url to vimeo video (not embed), in private video this url always return 404
  spatial: TinyInt;
  thumbs: Record<string, string>;
  title: string;
  unlisted_hash: null; // idk
  url: string; // url to vimeo video (empty if video is private)
  version: unknown; // useless
  video_width?: number;
  video_height?: number;
  width: number;
};

export type PrivateFileCDN = {
  avc_url: string;
  captions?: string; // only in hls
  origin: "gcs";
  url: string; // equal avc_url
};

export type DashStream = {
  fps: number;
  id: string;
  profile: string;
  quality: string;
};

export type PrivateHLSFiles = {
  cdns: Record<string, PrivateFileCDN>;
  default_cdn: string;
  separate_av: boolean;
};

export interface PrivateDashFiles extends PrivateHLSFiles {
  streams: DashStream[];
  streams_avc: DashStream[];
}

export type PrivateFiles = {
  dash: PrivateDashFiles; // easy way to get raw mp4
  hls: PrivateHLSFiles;
};

export type PrivateVideoSubtitle = {
  kind: "captions";
  lang: string; // ...-x-autogenerated for autogenerated
  label: string;
  id: number;
  url: string; // path (!!!) to file. domain is player.vimeo.com
};

export type PrivateRequest = {
  ab_tests: unknown;
  ai_widget_signature: string;
  atid: string;
  build: unknown; // useless
  client: Record<"ip", string>;
  cookie: unknown; // useless
  cookie_domain: string;
  country: string; // e.g. RU
  currency: string; // e.g. RUB
  expires: number; // seconds
  file_codecs: unknown; // useless
  files: PrivateFiles;
  flags: Record<string, string | number>;
  lang: string;
  referrer: string;
  session: string;
  signature: string;
  text_tracks: PrivateVideoSubtitle[];
  thumb_preview: Record<string, string | number>;
  timestamp: number;
  urls: Record<string, string>; // js, css, other... useless
};

export type PlayerConfig = {
  _colors: Record<string, string>;
  cdn_url: string; // idk why this is needed (schema + domain)
  embed: Record<string, string>;
  player_url: string; // domain
  request: PrivateRequest;
  user: unknown; // useless
  video: PrivateVideo;
  view: number;
  vimeo_api_url: string; // domain
  vimeo_url: string; // domain
};

export type DashFileVideoSegment = {
  start: number;
  end: number;
  url: string; // part of final url, contain &range=
  size: number;
};

export type DashFileVideo = {
  id: string;
  avg_id: string;
  base_url: string; // part of final url
  format: "dash" | "mp42";
  mime_type: "video/mp4";
  codecs: string;
  bitrate: number;
  avg_bitrate: number;
  duration: number;
  framerate: number;
  width: number;
  height: number;
  max_segment_duration: number;
  init_segment: string;
  index_segment?: string; // can be not full, don't use it
  segments: DashFileVideoSegment[];
};

export interface DashFileAudio
  extends Omit<DashFileVideo, "framerate" | "mime_type" | "width" | "height"> {
  mime_type: "audio/mp4";
  channels: number;
  sample_rate: number;
}

export type DashFileConfig = {
  clip_id: string;
  base_url: string; // count ../ + add 1
  video: DashFileVideo[];
  audio: DashFileAudio[];
};

export type Paging = {
  next: null | number;
  previous: null | number;
  first: string;
  last: string;
};

export type PaginationResponse<T> = {
  total: number;
  page: number;
  per_page: 100;
  paging: Paging;
  data: T;
};

export type VideoSubsData = PaginationResponse<VideoSubtitle[]>;
export type Data = Error | VideoInfo | VideoSubsData;
